********************************************************************************

			Check the version of doxygen you're using, there is a bug
			with older versions ( < 1.7.0 ? )

********************************************************************************

USAGE
=======================
To invoke doxygen, 
   cd $(papi_dir)/doc
   doxygen 

This command produces man-pages for the PAPI user-exposed api and data-structures. 

There are several different configuration files are present:
Doxyfile - the default config used when invoking doxygen, creates man-pages 
	for api and user data-structures.
Doxyfile-everything - Creates manpages for anything that looks like source code
	under the src directory. 
Doxyfile.html - Generates html documentation for user exposed api/data-structures.
Doxyfile.utils - 

doc/Doxyfile is the configuration file for doxygen.
Really the only thing to pay attention to in Doxyfile is the INPUT variable,
which controls which files are parsed by doxygen. Currently files to be
documented are enumerated, but this can change (see commented
out declaration to find every file in src and src/utils and lower, the 
FILE_PATTERNS variable)



Commenting the Code
=======================
To get doxygen's attention, in general, use a special comment block

/** */
thing_to_be_commented

Doxygen responds to several special commands, denoted by @command 
(if you're feeling texy, \command)

As an artifact of how doxygen started life, we call our api functions 'classes' 
to get doxygen to generate man-pages for the function.

/** @class MY_FUNCTION
    @brief gives a brief overview of what the function does, 
		limited to 1 line or 1 sentence if you need the space.
	@param arg1 describes a parameter to the function

	@return describes the functions return value
	
	@retval allows you to enumerate return values 

	Down here we have more detailed information about the function
	Which can span many lines

	And paragraphs (feeling texy now?)

	@par Examples:
	@code
	This is the way to get examples to format nicely
	code goes here....
	@endcode

	@bug 
	Here you get a section of freeform text to describe bugs you encounter. 
*/

@internal keeps comment blocks marked as such out of the documentation 
(unless the INTERNAL_DOCS flag is set in the config file)


In several places /**< */ appears, this means that the comment
pertains to the previous element.

int foo;	/**< This comment is about foo */


TODO
=======================
Finish bringing the comments for the low level api up to date 
(see papi.c:PAPI_destroy_eventset() for an idea of what the comments can look like )
Taken from the man pages http://icl.cs.utk.edu/projects/papi/wiki/PAPIC:PAPI.3

Doxygen provides options for [ab]using the preprocessor,
Do we need to look into this?

Fortran Documentation

Document the ctests?

Document a component/substrate

See 
http://www.stack.nl/~dimitri/doxygen/docblocks.html
for more detail on doxygen.
