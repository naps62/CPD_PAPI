.TH "papi_vector_t" 3 "Tue Oct 25 2011" "Version 4.2.0.0" "PAPI-C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
papi_vector_t \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <papi_vector.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBPAPI_component_info_t\fP \fBcmp_info\fP"
.br
.ti -1c
.RI "\fBcmp_struct_sizes_t\fP \fBsize\fP"
.br
.ti -1c
.RI "void(* \fBdispatch_timer\fP )(int, hwd_siginfo_t *, void *)"
.br
.ti -1c
.RI "void *(* \fBget_overflow_address\fP )(int, char *, int)"
.br
.ti -1c
.RI "int(* \fBstart\fP )(hwd_context_t *, hwd_control_state_t *)"
.br
.ti -1c
.RI "int(* \fBstop\fP )(hwd_context_t *, hwd_control_state_t *)"
.br
.ti -1c
.RI "int(* \fBread\fP )(hwd_context_t *, hwd_control_state_t *, long long **, int)"
.br
.ti -1c
.RI "int(* \fBreset\fP )(hwd_context_t *, hwd_control_state_t *)"
.br
.ti -1c
.RI "int(* \fBwrite\fP )(hwd_context_t *, hwd_control_state_t *, long long[])"
.br
.ti -1c
.RI "int(* \fBcleanup_eventset\fP )(hwd_control_state_t *)"
.br
.ti -1c
.RI "long long(* \fBget_real_cycles\fP )(void)"
.br
.ti -1c
.RI "long long(* \fBget_real_usec\fP )(void)"
.br
.ti -1c
.RI "long long(* \fBget_virt_cycles\fP )(hwd_context_t *)"
.br
.ti -1c
.RI "long long(* \fBget_virt_usec\fP )(hwd_context_t *)"
.br
.ti -1c
.RI "int(* \fBstop_profiling\fP )(ThreadInfo_t *, EventSetInfo_t *)"
.br
.ti -1c
.RI "int(* \fBinit_substrate\fP )(int)"
.br
.ti -1c
.RI "int(* \fBinit\fP )(hwd_context_t *)"
.br
.ti -1c
.RI "int(* \fBinit_control_state\fP )(hwd_control_state_t *ptr)"
.br
.ti -1c
.RI "int(* \fBupdate_shlib_info\fP )(papi_mdi_t *mdi)"
.br
.ti -1c
.RI "int(* \fBget_system_info\fP )(papi_mdi_t *mdi)"
.br
.ti -1c
.RI "int(* \fBget_memory_info\fP )(\fBPAPI_hw_info_t\fP *, int)"
.br
.ti -1c
.RI "int(* \fBupdate_control_state\fP )(hwd_control_state_t *, NativeInfo_t *, int, hwd_context_t *)"
.br
.ti -1c
.RI "int(* \fBctl\fP )(hwd_context_t *, int, _papi_int_option_t *)"
.br
.ti -1c
.RI "int(* \fBset_overflow\fP )(EventSetInfo_t *, int, int)"
.br
.ti -1c
.RI "int(* \fBset_profile\fP )(EventSetInfo_t *, int, int)"
.br
.ti -1c
.RI "int(* \fBadd_prog_event\fP )(hwd_control_state_t *, unsigned int, void *, EventInfo_t *)"
.br
.ti -1c
.RI "int(* \fBset_domain\fP )(hwd_control_state_t *, int)"
.br
.ti -1c
.RI "int(* \fBntv_enum_events\fP )(unsigned int *, int)"
.br
.ti -1c
.RI "int(* \fBntv_name_to_code\fP )(char *, unsigned int *)"
.br
.ti -1c
.RI "int(* \fBntv_code_to_name\fP )(unsigned int, char *, int)"
.br
.ti -1c
.RI "int(* \fBntv_code_to_descr\fP )(unsigned int, char *, int)"
.br
.ti -1c
.RI "int(* \fBntv_code_to_bits\fP )(unsigned int, hwd_register_t *)"
.br
.ti -1c
.RI "int(* \fBntv_bits_to_info\fP )(hwd_register_t *, char *, unsigned int *, int, int)"
.br
.ti -1c
.RI "int(* \fBallocate_registers\fP )(EventSetInfo_t *)"
.br
.ti -1c
.RI "int(* \fBbpt_map_avail\fP )(hwd_reg_alloc_t *, int)"
.br
.ti -1c
.RI "void(* \fBbpt_map_set\fP )(hwd_reg_alloc_t *, int)"
.br
.ti -1c
.RI "int(* \fBbpt_map_exclusive\fP )(hwd_reg_alloc_t *)"
.br
.ti -1c
.RI "int(* \fBbpt_map_shared\fP )(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.br
.ti -1c
.RI "void(* \fBbpt_map_preempt\fP )(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.br
.ti -1c
.RI "void(* \fBbpt_map_update\fP )(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.br
.ti -1c
.RI "int(* \fBget_dmem_info\fP )(\fBPAPI_dmem_info_t\fP *)"
.br
.ti -1c
.RI "int(* \fBshutdown\fP )(hwd_context_t *)"
.br
.ti -1c
.RI "int(* \fBshutdown_substrate\fP )(void)"
.br
.ti -1c
.RI "int(* \fBuser\fP )(int, void *, void *)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Vector Table Stuff 
.SH "Field Documentation"
.PP 
.SS "int(* \fBpapi_vector_t::add_prog_event\fP)(hwd_control_state_t *, unsigned int, void *, EventInfo_t *)"
.SS "int(* \fBpapi_vector_t::allocate_registers\fP)(EventSetInfo_t *)"
.SS "int(* \fBpapi_vector_t::bpt_map_avail\fP)(hwd_reg_alloc_t *, int)"
.SS "int(* \fBpapi_vector_t::bpt_map_exclusive\fP)(hwd_reg_alloc_t *)"
.SS "void(* \fBpapi_vector_t::bpt_map_preempt\fP)(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.SS "void(* \fBpapi_vector_t::bpt_map_set\fP)(hwd_reg_alloc_t *, int)"
.SS "int(* \fBpapi_vector_t::bpt_map_shared\fP)(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.SS "void(* \fBpapi_vector_t::bpt_map_update\fP)(hwd_reg_alloc_t *, hwd_reg_alloc_t *)"
.SS "int(* \fBpapi_vector_t::cleanup_eventset\fP)(hwd_control_state_t *)"
.SS "\fBPAPI_component_info_t\fP \fBpapi_vector_t::cmp_info\fP"Substrate specific data structure 
.PP
\fBSee also:\fP
.RS 4
\fBpapi.h\fP 
.RE
.PP

.SS "int(* \fBpapi_vector_t::ctl\fP)(hwd_context_t *, int, _papi_int_option_t *)"
.SS "int(* \fBpapi_vector_t::get_dmem_info\fP)(\fBPAPI_dmem_info_t\fP *)"
.SS "int(* \fBpapi_vector_t::get_memory_info\fP)(\fBPAPI_hw_info_t\fP *, int)"
.SS "void*(* \fBpapi_vector_t::get_overflow_address\fP)(int, char *, int)"
.SS "long long(* \fBpapi_vector_t::get_real_cycles\fP)(void)"
.SS "long long(* \fBpapi_vector_t::get_real_usec\fP)(void)"
.SS "int(* \fBpapi_vector_t::get_system_info\fP)(papi_mdi_t *mdi)"
.SS "long long(* \fBpapi_vector_t::get_virt_cycles\fP)(hwd_context_t *)"
.SS "long long(* \fBpapi_vector_t::get_virt_usec\fP)(hwd_context_t *)"
.SS "int(* \fBpapi_vector_t::init\fP)(hwd_context_t *)"
.SS "int(* \fBpapi_vector_t::init_control_state\fP)(hwd_control_state_t *ptr)"
.SS "int(* \fBpapi_vector_t::init_substrate\fP)(int)"
.SS "int(* \fBpapi_vector_t::ntv_bits_to_info\fP)(hwd_register_t *, char *, unsigned int *, int, int)"
.SS "int(* \fBpapi_vector_t::ntv_code_to_bits\fP)(unsigned int, hwd_register_t *)"
.SS "int(* \fBpapi_vector_t::ntv_code_to_descr\fP)(unsigned int, char *, int)"
.SS "int(* \fBpapi_vector_t::ntv_code_to_name\fP)(unsigned int, char *, int)"
.SS "int(* \fBpapi_vector_t::ntv_enum_events\fP)(unsigned int *, int)"
.SS "int(* \fBpapi_vector_t::ntv_name_to_code\fP)(char *, unsigned int *)"
.SS "int(* \fBpapi_vector_t::read\fP)(hwd_context_t *, hwd_control_state_t *, long long **, int)"
.SS "int(* \fBpapi_vector_t::reset\fP)(hwd_context_t *, hwd_control_state_t *)"
.SS "int(* \fBpapi_vector_t::set_domain\fP)(hwd_control_state_t *, int)"
.SS "int(* \fBpapi_vector_t::set_overflow\fP)(EventSetInfo_t *, int, int)"
.SS "int(* \fBpapi_vector_t::set_profile\fP)(EventSetInfo_t *, int, int)"
.SS "int(* \fBpapi_vector_t::shutdown\fP)(hwd_context_t *)"
.SS "int(* \fBpapi_vector_t::shutdown_substrate\fP)(void)"
.SS "\fBcmp_struct_sizes_t\fP \fBpapi_vector_t::size\fP"Substrate specific structure sizes 
.SS "int(* \fBpapi_vector_t::start\fP)(hwd_context_t *, hwd_control_state_t *)"
.SS "int(* \fBpapi_vector_t::stop\fP)(hwd_context_t *, hwd_control_state_t *)"
.SS "int(* \fBpapi_vector_t::stop_profiling\fP)(ThreadInfo_t *, EventSetInfo_t *)"
.SS "int(* \fBpapi_vector_t::update_control_state\fP)(hwd_control_state_t *, NativeInfo_t *, int, hwd_context_t *)"
.SS "int(* \fBpapi_vector_t::update_shlib_info\fP)(papi_mdi_t *mdi)"
.SS "int(* \fBpapi_vector_t::user\fP)(int, void *, void *)"
.SS "int(* \fBpapi_vector_t::write\fP)(hwd_context_t *, hwd_control_state_t *, long long[])"

.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI-C from the source code.
