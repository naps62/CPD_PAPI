.TH "PAPI_get_overflow_event_index" 3 "Tue Oct 25 2011" "Version 4.2.0.0" "PAPI-C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_get_overflow_event_index \- 
.PP
converts an overflow vector into an array of indexes to overflowing events  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
\fBParameters:\fP
.RS 4
\fIEventSet\fP an integer handle to a PAPI event set as created by \fBPAPI_create_eventset\fP 
.br
\fIoverflow_vector\fP a vector with bits set for each counter that overflowed. This vector is passed by the system to the overflow handler routine. 
.br
\fI*array\fP an array of indexes for events in EventSet. No more than *number indexes will be stored into the array. 
.br
\fI*number\fP On input the variable determines the size of the array. On output the variable contains the number of indexes in the array.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_EINVAL\fP One or more of the arguments is invalid. This could occur if the overflow_vector is empty (zero), if the array or number pointers are NULL, if the value of number is less than one, or if the EventSet is empty. 
.br
\fIPAPI_ENOEVST\fP The EventSet specified does not exist. 
.RE
.PP
\fBExamples\fP
.RS 4

.PP
.nf
        void handler(int EventSet, void *address, long_long overflow_vector, void *context){
        int Events[4], number, i;
        int total = 0, retval;
        printf('Overflow #%d\n  Handler(%d) Overflow at %p! vector=0x%llx\n',
        total, EventSet, address, overflow_vector);
        total++;
        number = 4;
        retval = PAPI_get_overflow_event_index(EventSet,
        overflow_vector, Events, &number);
        if(retval == PAPI_OK)
        for(i=0; i<number; i++) printf('Event index[%d] = %d', i, Events[i]);}

.fi
.PP
 
.RE
.PP
\fBBug\fP
.RS 4
This function may not return all overflowing events if used with software-driven overflow of multiple derived events. \fBPAPI_get_overflow_event_index\fP decomposes an overflow_vector into an event index array in which the first element corresponds to the least significant set bit in overflow_vector and so on. Based on overflow_vector, the user can only tell which physical counters overflowed. Using this function, the user can map overflowing counters to specific events in the event set. An array is used in this function to support the possibility of multiple simultaneous overflow events.
.RE
.PP
.PP
\fBSee also:\fP
.RS 4
\fBPAPI_overflow\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI-C from the source code.
