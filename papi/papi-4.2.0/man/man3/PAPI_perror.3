.TH "PAPI_perror" 3 "Tue Oct 25 2011" "Version 4.2.0.0" "PAPI-C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_perror \- 
.PP
Convert PAPI error codes to strings, and print error message to stderr.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
\fBC Interface:\fP
.RS 4
#include <\fBpapi.h\fP> 
.br
 int \fBPAPI_perror( int code, char *destination, int length )\fP;
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcode\fP -- the error code to interpret 
.br
\fIdestination\fP -- the error message in quotes 
.br
\fIlength\fP -- either 0 or strlen(destination)
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_EINVAL\fP One or more of the arguments to \fBPAPI_perror()\fP is invalid.
.RE
.PP
\fBPAPI_perror()\fP fills the string destination with the error message corresponding to the error code code. The function copies length worth of the error description string corresponding to code into destination. The resulting string is always null terminated. If length is 0, then the string is printed on stderr.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
  int ret;
  int EventSet = PAPI_NULL;
  int native = 0x0;
  char error_str[PAPI_MAX_STR_LEN];

  ret = PAPI_create_eventset(&EventSet);
  if (ret != PAPI_OK)
  {
     fprintf(stderr, \'PAPI error %d: %s\\n\', ret, PAPI_strerror(retval));
     exit(1);
  }
  // Add Total Instructions Executed to our EventSet
  ret = PAPI_add_event(EventSet, PAPI_TOT_INS);
  if (ret != PAPI_OK)
  {
     PAPI_perror(ret, error_str, PAPI_MAX_STR_LEN);
     fprintf(stderr,\'PAPI_error %d: %s\\n\', ret, error_str);
     exit(1);
  }
  // Start counting
  ret = PAPI_start(EventSet);
  if (ret != PAPI_OK) handle_error(ret);

.fi
.PP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPAPI_strerror\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI-C from the source code.
